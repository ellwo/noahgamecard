<?php

namespace App\Http\Livewire\Admin;

use App\Models\ClientProvider;
use App\Models\Product;
use App\Models\ProviderProduct;
use Illuminate\Database\Query\Builder;
use Livewire\Component;
use Livewire\WithPagination;

class ProviderProductTable extends Component
{


   public $dateorder="no";
   public $priceorder="no";
   public $search="";
   public $countorder="DESC";
   public $deptid;
   public $editproid="no";
   public $deleteproid="no";
   public $paginate_num=20;
   public $client=-1;

    /**
     * @param string $deleteproid
     */
    public function setDeleteproid($deleteproid)
    {
        $this->deleteproid = $deleteproid;
    }

    public function getQueryString()
    {
        return ['search'=>$this->search,'page'=>$this->page,
        'deptid'=>$this->deptid,]; // TODO: Change the autogenerated stub
    }

    protected $queryString=['search','page','deptid'];

    public function  mount($deptid="all",$search="",$client=-1){


       $this->deptid=$deptid;
       $this->search=$search;
       $this->client=$client;

       if(isset($_GET['deptid']) && $_GET['deptid']!=null)
           $this->deptid=$_GET['deptid'];
           if(isset($_GET['client']) && $_GET['client']!=null)
               $this->client=$_GET['client'];
   }



   use WithPagination;
    public function render()
    {


        $clients=ClientProvider::all();

        if($this->deptid=="all") {





            if($this->dateorder=="no" && $this->priceorder=="no"){

                $products = ProviderProduct::where('active','=',1)->where("name", "LIKE", "%" . $this->search . "%")
                    ->orderByDesc("updated_at")->where(function($q){
                        if($this->client==-1){

                            $q->where('client_provider_id','>',0);
                        }else{
                            $q->where('client_provider_id','=',$this->client);
                        }
                    })->paginate($this->paginate_num);
            }
            else if($this->priceorder!="no"){
                $this->dateorder="no";
                $products = ProviderProduct::where('active','=',1)->where("name", "LIKE", "%" . $this->search . "%")
                    ->orderBy("price",$this->priceorder)->where(function($q){
                        if($this->client==-1){

                            $q->where('client_provider_id','>',0);
                        }else{
                            $q->where('client_provider_id','=',$this->client);
                        }
                    })->paginate($this->paginate_num);
            }
            else if($this->dateorder!="no"){
                $this->priceorder="no";
                $products = ProviderProduct::where('active','=',1)->where("name", "LIKE", "%" . $this->search . "%")
                    ->orderBy("updated_at",$this->dateorder)->where(function($q){
                        if($this->client==-1){

                            $q->where('client_provider_id','>',0);
                        }else{
                            $q->where('client_provider_id','=',$this->client);
                        }
                    })->paginate($this->paginate_num);
            }




            return view('admin.provider-products.product-table', compact('products','clients'));
        }
        else {
            if($this->dateorder=="no" && $this->priceorder=="no"){

                $products = ProviderProduct::where('active','=',1)->whereHas('product',function($q){
                    $q->where("department_id",$this->deptid);
                })->where("name", "LIKE", "%" . $this->search . "%")
                    ->orderByDesc("updated_at")->where(function($q){
                        if($this->client==-1){

                            $q->where('client_provider_id','>',0);
                        }else{
                            $q->where('client_provider_id','=',$this->client);
                        }
                    })->paginate($this->paginate_num);
            }
            else if($this->priceorder!="no"){
                $products = ProviderProduct::where('active','=',1)->whereHas('product',function($q){
                    $q->where("department_id",$this->deptid);
                })->where("name", "LIKE", "%" . $this->search . "%")
                    ->orderBy("price",$this->priceorder)->where(function($q){
                        if($this->client==-1){

                            $q->where('client_provider_id','>',0);
                        }else{
                            $q->where('client_provider_id','=',$this->client);
                        }
                    })->paginate($this->paginate_num);
            }
            else if($this->dateorder!="no"){
                $products = ProviderProduct::where('active','=',1)->whereHas('product',function($q){
                    $q->where("department_id",$this->deptid);
                })->where("name", "LIKE", "%" . $this->search . "%")
                    ->orderBy("updated_at",$this->dateorder)->where(function($q){
                        if($this->client==-1){

                            $q->where('client_provider_id','>',0);
                        }else{
                            $q->where('client_provider_id','=',$this->client);
                        }
                    })->paginate($this->paginate_num);
            }




            return view('admin.provider-products.product-table', compact('products','clients'))
            ;

        }
    }
    public function updateDeptid(){
        $this->resetPage();
    }



    public function tlogdate(){
        if($this->dateorder=="no" || $this->dateorder=="DESC"){
            $this->dateorder="ASC";
            $this->priceorder="no";
        }
        else{
            $this->dateorder="DESC";
            $this->priceorder="no";
        }
    }

    public function tlogprice(){
        if($this->priceorder=="no" || $this->priceorder=="DESC"){
            $this->priceorder="ASC";
            $this->dateorder="no";
        }
        else{
            $this->priceorder="DESC";
            $this->dateorder="no";
        }
    }



    public function deletePro($id){
        $product=ProviderProduct::where('active','=',1)->find($id);

        session()->flash('statt','ok');
        session()->flash('message','تم الحذف');

        $this->deleteproid="no";


    }



    public function deactive($p){

        $providerProduct=ProviderProduct::where('active','=',1)->find($p);
        $providerProduct->update([
           'active'=>0
        ]);
        session()->flash('statt','ok');
        session()->flash('message','تم التعديل بنجاح');

    }
    public function active($p){

         $providerProduct=ProviderProduct::where('active','=',1)->find($p);
         $providerProduct->update([
            'active'=>1
         ]);
            $providerProduct->product->provider_products()
            ->where('id','!=',$providerProduct->id)->update([
                'active'=>0
            ]);
         session()->flash('statt','ok');
         session()->flash('message','تم التعديل بنجاح');

        }
    public function editpro($id){

        $this->editproid=$id;

        redirect()->route("admin.productsaddnew",["editproid"=>$id]);

        //$this->emit("");
      //  $this->render();

    }
    public function cancelEdit(){
        $this->editproid="no";
    }
}
